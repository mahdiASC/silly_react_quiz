{"version":3,"sources":["components/newGameButton.jsx","components/options.jsx","components/question.jsx","components/score.jsx","components/footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NewGameButton","_ref","onReset","react_default","a","createElement","className","onClick","Options","newGameButton","Question","number","question","onAnswer","text","answers","map","answer","i","key","Score","score","questions","length","toFixed","colorClass","correct_answer","Footer","App","state","currentQuestionIndex","counts","handleAnswer","correctAnswer","_this","Object","toConsumableArray","push","setState","handleReset","getNewQuestions","this","_this2","fetch","then","response","json","_parseQuestions","data","results","questionObj","_answers","concat","incorrect_answers","rand_index","Math","floor","random","str","splice","decoded_str","decodeURIComponent","content","getCurrentContent","options","id","footer","formQuestion","formScore","components_score","filter","count","components_question","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f43e0c4e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NewGameButton = ({ onReset }) => {\r\n  return (\r\n    <button className=\"resetButton\" onClick={onReset}>\r\n      New Game\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default NewGameButton;\r\n","import React from \"react\";\r\nimport NewGameButton from \"./newGameButton\";\r\n\r\nconst Options = ({ onReset }) => {\r\n  return (\r\n    <header>\r\n      <div className=\"filler\" />\r\n      <h1>Silly React Quiz</h1>\r\n      <div className=\"filler\">\r\n        <NewGameButton onReset={onReset} />\r\n      </div>\r\n      <div className=\"clear-fix\" />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","import React from \"react\";\r\n\r\nconst Question = ({ number, question, onAnswer }) => {\r\n  return (\r\n    <div className=\"question\">\r\n      <h1>Question #{number}</h1>\r\n      <p>{question && question.text}</p>\r\n      <ul>\r\n        {question &&\r\n          question.answers.map((answer, i) => {\r\n            return (\r\n              <button\r\n                className=\"choiceButton\"\r\n                onClick={() => onAnswer(answer)}\r\n                key={i}\r\n              >\r\n                {answer}\r\n              </button>\r\n            );\r\n          })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import React from \"react\";\r\nimport NewGameButton from \"./newGameButton\";\r\n\r\nconst Score = ({ score, questions, answers, onReset }) => {\r\n  return (\r\n    <div className=\"scoreReport\">\r\n      <h1>Score: {((score / questions.length) * 100).toFixed(0)}%</h1>\r\n      <ul>\r\n        {questions.map((question, i) => {\r\n          const answer = answers[i];\r\n          const colorClass = answer ? \"correct\" : \"incorrect\";\r\n          return (\r\n            <li className=\"scoreReportQuestion\" key={i}>\r\n              <h3>\r\n                <span className=\"accentText\">Question #{i + 1}:</span>\r\n                {question.text}\r\n              </h3>\r\n              <h4 className={colorClass}>{question.correct_answer}</h4>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n      <NewGameButton onReset={onReset} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <p>Copyright Â© 2019 Mahdi Shadkam-Farrokhi | All rights reserved</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport Options from \"./components/options\";\r\nimport Question from \"./components/question\";\r\nimport Score from \"./components/score\";\r\nimport Footer from \"./components/footer\";\r\n\r\n// https://opentdb.com/\r\nconst URL = \"https://opentdb.com/api.php?amount=10&category=18&encode=url3986\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    questions: [],\r\n    currentQuestionIndex: 0,\r\n    counts: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getNewQuestions();\r\n  }\r\n\r\n  getNewQuestions() {\r\n    fetch(URL)\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        const questions = this._parseQuestions(json);\r\n        const currentQuestionIndex = 0;\r\n        this.setState({ questions, currentQuestionIndex });\r\n      });\r\n  }\r\n\r\n  _parseQuestions(data) {\r\n    return data.results.map(questionObj => {\r\n      const { correct_answer, question: text } = questionObj;\r\n      const _answers = [...questionObj.incorrect_answers, correct_answer];\r\n\r\n      const answers = [];\r\n      while (_answers.length) {\r\n        const rand_index = Math.floor(Math.random() * _answers.length);\r\n        const str = _answers.splice(rand_index, 1)[0];\r\n        const decoded_str = decodeURIComponent(str);\r\n        answers.push(decoded_str);\r\n      }\r\n\r\n      return {\r\n        correct_answer: decodeURIComponent(correct_answer),\r\n        text: decodeURIComponent(text),\r\n        answers\r\n      };\r\n    });\r\n  }\r\n\r\n  handleAnswer = answer => {\r\n    const correctAnswer = this.state.questions[this.state.currentQuestionIndex]\r\n      .correct_answer;\r\n\r\n    const counts = [...this.state.counts];\r\n    if (answer === correctAnswer) {\r\n      counts.push(1);\r\n    } else {\r\n      counts.push(0);\r\n    }\r\n    this.setState({\r\n      counts,\r\n      currentQuestionIndex: this.state.currentQuestionIndex + 1\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.getNewQuestions();\r\n  };\r\n\r\n  render() {\r\n    const content = this.getCurrentContent();\r\n    return (\r\n      <main>\r\n        <Options onReset={this.handleReset} />\r\n        <div className=\"filler\" id=\"gameContainer\">\r\n          {content}\r\n        </div>\r\n        <Footer />\r\n      </main>\r\n    );\r\n  }\r\n\r\n  getCurrentContent() {\r\n    if (this.state.currentQuestionIndex < this.state.questions.length) {\r\n      return this.formQuestion();\r\n    }\r\n    return this.formScore();\r\n  }\r\n\r\n  formScore() {\r\n    return (\r\n      <Score\r\n        score={this.state.counts.filter(count => count > 0).length}\r\n        questions={this.state.questions}\r\n        answers={this.state.counts}\r\n        onReset={this.handleReset}\r\n      />\r\n    );\r\n  }\r\n\r\n  formQuestion() {\r\n    return (\r\n      <Question\r\n        question={this.state.questions[this.state.currentQuestionIndex]}\r\n        number={this.state.currentQuestionIndex + 1}\r\n        onAnswer={this.handleAnswer}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}
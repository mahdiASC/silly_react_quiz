{"version":3,"sources":["components/newGameButton.jsx","components/options.jsx","components/question.jsx","components/score.jsx","components/footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NewGameButton","_ref","onReset","react_default","a","createElement","className","onClick","Options","newGameButton","Question","number","question","onAnswer","text","answers","map","answer","i","key","Score","score","questions","length","toFixed","colorClass","correct_answer","Footer","App","state","currentQuestionIndex","counts","handleAnswer","correctAnswer","_this","Object","toConsumableArray","push","setState","handleReset","getNewQuestions","this","_this2","fetch","then","response","json","_parseQuestions","data","results","questionObj","_answers","concat","incorrect_answers","rand_index","Math","floor","random","str","splice","decoded_str","decodeURIComponent","content","getCurrentContent","options","id","footer","formQuestion","formScore","components_score","filter","count","components_question","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e02c893.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NewGameButton = ({ onReset }) => {\r\n  return (\r\n    <button className=\"resetButton\" onClick={onReset}>\r\n      New Game\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default NewGameButton;\r\n","import React from \"react\";\r\nimport NewGameButton from \"./newGameButton\";\r\n\r\nconst Options = ({ onReset }) => {\r\n  return (\r\n    <header>\r\n      <div className=\"filler\" />\r\n      <h1>Silly React Quiz</h1>\r\n      <div className=\"filler\">\r\n        <NewGameButton onReset={onReset} />\r\n      </div>\r\n      <div className=\"clear-fix\" />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","import React from \"react\";\r\n\r\nconst Question = ({ number, question, onAnswer }) => {\r\n  return (\r\n    <div className=\"question\">\r\n      <h1>Question #{number}</h1>\r\n      <p>{question && question.text}</p>\r\n      <ul>\r\n        {question &&\r\n          question.answers.map((answer, i) => {\r\n            return (\r\n              <button\r\n                className=\"choiceButton\"\r\n                onClick={() => onAnswer(answer)}\r\n                key={i}\r\n              >\r\n                {answer}\r\n              </button>\r\n            );\r\n          })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import React from \"react\";\r\nimport NewGameButton from \"./newGameButton\";\r\n\r\nconst Score = ({ score, questions, answers, onReset }) => {\r\n  return (\r\n    <div className=\"scoreReport\">\r\n      <h1>Score: {((score / questions.length) * 100).toFixed(0)}%</h1>\r\n      <ul>\r\n        {questions.map((question, i) => {\r\n          const answer = answers[i];\r\n          const colorClass = answer ? \"correct\" : \"incorrect\";\r\n          return (\r\n            <li className=\"scoreReportQuestion\" key={i}>\r\n              <h3>\r\n                <span className=\"accentText\">Question #{i + 1}:</span>\r\n                {question.text}\r\n              </h3>\r\n              <h4 className={colorClass}>{question.correct_answer}</h4>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n      <NewGameButton onReset={onReset} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <p>Copyright Â© 2019 Mahdi Shadkam-Farrokhi | All rights reserved</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport Options from \"./components/options\";\nimport Question from \"./components/question\";\nimport Score from \"./components/score\";\nimport Footer from \"./components/footer\";\n\n// https://opentdb.com/\nconst URL = \"https://opentdb.com/api.php?amount=10&category=18&encode=url3986\";\n\nclass App extends Component {\n  state = {\n    questions: [],\n    currentQuestionIndex: 0,\n    counts: []\n  };\n\n  componentDidMount() {\n    this.getNewQuestions();\n  }\n\n  getNewQuestions() {\n    fetch(URL)\n      .then(response => response.json())\n      .then(json => {\n        const questions = this._parseQuestions(json);\n        const currentQuestionIndex = 0;\n        this.setState({ questions, currentQuestionIndex });\n      });\n  }\n\n  _parseQuestions(data) {\n    return data.results.map(questionObj => {\n      const { correct_answer, question: text } = questionObj;\n      const _answers = [...questionObj.incorrect_answers, correct_answer];\n\n      const answers = [];\n      while (_answers.length) {\n        const rand_index = Math.floor(Math.random() * _answers.length);\n        const str = _answers.splice(rand_index, 1)[0];\n        const decoded_str = decodeURIComponent(str);\n        answers.push(decoded_str);\n      }\n\n      return {\n        correct_answer: decodeURIComponent(correct_answer),\n        text: decodeURIComponent(text),\n        answers\n      };\n    });\n  }\n\n  handleAnswer = answer => {\n    const correctAnswer = this.state.questions[this.state.currentQuestionIndex]\n      .correct_answer;\n\n    const counts = [...this.state.counts];\n    if (answer === correctAnswer) {\n      counts.push(1);\n    } else {\n      counts.push(0);\n    }\n    this.setState({\n      counts,\n      currentQuestionIndex: this.state.currentQuestionIndex + 1\n    });\n  };\n\n  handleReset = () => {\n    this.getNewQuestions();\n  };\n\n  render() {\n    const content = this.getCurrentContent();\n    return (\n      <main>\n        <Options onReset={this.handleReset} />\n        <div className=\"filler\" id=\"gameContainer\">\n          {content}\n        </div>\n        <Footer />\n      </main>\n    );\n  }\n\n  getCurrentContent() {\n    if (this.state.currentQuestionIndex < this.state.questions.length) {\n      return this.formQuestion();\n    }\n    return this.formScore();\n  }\n\n  formScore() {\n    return (\n      <Score\n        score={this.state.counts.filter(count => count > 0).length}\n        questions={this.state.questions}\n        answers={this.state.counts}\n        onReset={this.handleReset}\n      />\n    );\n  }\n\n  formQuestion() {\n    return (\n      <Question\n        question={this.state.questions[this.state.currentQuestionIndex]}\n        number={this.state.currentQuestionIndex + 1}\n        onAnswer={this.handleAnswer}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}